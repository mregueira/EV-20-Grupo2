////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : mux10.vf
// /___/   /\     Timestamp : 06/09/2020 01:47:34
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -sympath C:/Users/Marcelo/Documents/GitHub/EV-20-Grupo2/MicroinstructionROM/ipcore_dir -intstyle ise -family artix7 -verilog C:/Users/Marcelo/Documents/GitHub/EV-20-Grupo2/MicroinstructionROM/mux10.vf -w C:/Users/Marcelo/Documents/GitHub/EV-20-Grupo2/MicroinstructionROM/mux10.sch
//Design Name: mux10
//Device: artix7
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module mux1_MUSER_mux10(constante, 
                        hold, 
                        muxin, 
                        muxout);

    input constante;
    input hold;
    input muxin;
   output muxout;
   
   
   MUXCY  XLXI_1 (.CI(constante), 
                 .DI(muxin), 
                 .S(hold), 
                 .O(muxout));
endmodule
`timescale 1ns / 1ps

module mux2_MUSER_mux10(const, 
                        hold, 
                        muxin, 
                        muxout);

    input [1:0] const;
    input hold;
    input [1:0] muxin;
   output [1:0] muxout;
   
   
   mux1_MUSER_mux10  XLXI_1 (.constante(const[0]), 
                            .hold(hold), 
                            .muxin(muxin[0]), 
                            .muxout(muxout[0]));
   mux1_MUSER_mux10  XLXI_2 (.constante(const[1]), 
                            .hold(hold), 
                            .muxin(muxin[1]), 
                            .muxout(muxout[1]));
endmodule
`timescale 1ns / 1ps

module mux4_MUSER_mux10(const, 
                        hold, 
                        muxin, 
                        muxout);

    input [3:0] const;
    input hold;
    input [3:0] muxin;
   output [3:0] muxout;
   
   
   mux2_MUSER_mux10  XLXI_1 (.const(const[1:0]), 
                            .hold(hold), 
                            .muxin(muxin[1:0]), 
                            .muxout(muxout[1:0]));
   mux2_MUSER_mux10  XLXI_2 (.const(const[3:2]), 
                            .hold(hold), 
                            .muxin(muxin[3:2]), 
                            .muxout(muxout[3:2]));
endmodule
`timescale 1ns / 1ps

module mux5_MUSER_mux10(const, 
                        hold, 
                        muxin, 
                        muxout);

    input [4:0] const;
    input hold;
    input [4:0] muxin;
   output [4:0] muxout;
   
   
   mux4_MUSER_mux10  XLXI_1 (.const(const[3:0]), 
                            .hold(hold), 
                            .muxin(muxin[3:0]), 
                            .muxout(muxout[3:0]));
   mux1_MUSER_mux10  XLXI_3 (.constante(const[4]), 
                            .hold(hold), 
                            .muxin(muxin[4]), 
                            .muxout(muxout[4]));
endmodule
`timescale 1ns / 1ps

module mux6_MUSER_mux10(const, 
                        hold, 
                        muxin, 
                        muxout);

    input [5:0] const;
    input hold;
    input [5:0] muxin;
   output [5:0] muxout;
   
   
   mux5_MUSER_mux10  XLXI_1 (.const(const[4:0]), 
                            .hold(hold), 
                            .muxin(muxin[4:0]), 
                            .muxout(muxout[4:0]));
   mux1_MUSER_mux10  XLXI_2 (.constante(const[5]), 
                            .hold(hold), 
                            .muxin(muxin[5]), 
                            .muxout(muxout[5]));
endmodule
`timescale 1ns / 1ps

module mux10(const, 
             muxin, 
             selector, 
             muxout);

    input [9:0] const;
    input [9:0] muxin;
    input selector;
   output [9:0] muxout;
   
   
   mux6_MUSER_mux10  XLXI_3 (.const(const[5:0]), 
                            .hold(selector), 
                            .muxin(muxin[5:0]), 
                            .muxout(muxout[5:0]));
   mux4_MUSER_mux10  XLXI_4 (.const(const[9:6]), 
                            .hold(selector), 
                            .muxin(muxin[9:6]), 
                            .muxout(muxout[9:6]));
endmodule
