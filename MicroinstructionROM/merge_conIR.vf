////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : merge_conIR.vf
// /___/   /\     Timestamp : 06/09/2020 00:32:29
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -sympath C:/Users/Marcelo/Documents/GitHub/EV-20-Grupo2/MicroinstructionROM/ipcore_dir -intstyle ise -family artix7 -verilog C:/Users/Marcelo/Documents/GitHub/EV-20-Grupo2/MicroinstructionROM/merge_conIR.vf -w C:/Users/Marcelo/Documents/GitHub/EV-20-Grupo2/MicroinstructionROM/merge_conIR.sch
//Design Name: merge_conIR
//Device: artix7
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale  100 ps / 10 ps

module OR6_HXILINX_merge_conIR (O, I0, I1, I2, I3, I4, I5);
    

   output O;

   input I0;
   input I1;
   input I2;
   input I3;
   input I4;
   input I5;

assign O = (I0 || I1 || I2 || I3 || I4 || I5);

endmodule
`timescale 100 ps / 10 ps

module IFD_HXILINX_merge_conIR(Q, C, D);
   
   output             Q;

   input 	      C;	
   input              D;
   
   parameter INIT = 1'b0;
   (* IOB = "TRUE" *) 

   reg                Q = INIT;

   always @(posedge C)
     begin
          Q <= D;
     end
   
   
endmodule
`timescale 1ns / 1ps

module unionMagica_MUSER_merge_conIR(CLK, 
                                     CY, 
                                     HOLD, 
                                     W, 
                                     increment, 
                                     INSTRUCTION, 
                                     INSTRUCTION_EXTENDIDA, 
                                     is_void, 
                                     levels_Out, 
                                     PC);

    input CLK;
    input CY;
    input HOLD;
    input [15:0] W;
   output increment;
   output [13:0] INSTRUCTION;
   output [21:0] INSTRUCTION_EXTENDIDA;
   output is_void;
   output [2:0] levels_Out;
   output [10:0] PC;
   
   wire [10:0] D;
   wire load;
   wire pre_load;
   wire [9:0] S;
   wire [10:0] STACK_IN;
   wire store;
   wire XLXN_75;
   wire XLXN_76;
   wire XLXN_79;
   wire [10:0] XLXN_146;
   wire [21:0] XLXN_156;
   wire is_void_DUMMY;
   wire [13:0] INSTRUCTION_DUMMY;
   wire increment_DUMMY;
   
   assign increment = increment_DUMMY;
   assign INSTRUCTION[13:0] = INSTRUCTION_DUMMY[13:0];
   assign is_void = is_void_DUMMY;
   AND2  XLXI_9 (.I0(CLK), 
                .I1(XLXN_79), 
                .O(increment_DUMMY));
   VCC  XLXI_13 (.P(XLXN_75));
   GND  XLXI_14 (.G(XLXN_76));
   INV  XLXI_18 (.I(HOLD), 
                .O(XLXN_79));
   voider  XLXI_32 (.clk(increment_DUMMY), 
                   .is_load(pre_load), 
                   .is_void(is_void_DUMMY));
   pc_increment_v2_module  XLXI_44 (.D(D[10:0]), 
                                   .increment(increment_DUMMY), 
                                   .is_BSR(store), 
                                   .is_RET(load), 
                                   .load(pre_load), 
                                   .S(S[9:0]), 
                                   .stack_in(STACK_IN[10:0]), 
                                   .Q(XLXN_146[10:0]));
   bloqueSaltos  XLXI_45 (.B(INSTRUCTION_DUMMY[13:0]), 
                         .CLK(CLK), 
                         .CY(CY), 
                         .Hold(HOLD), 
                         .W0to15(W[15:0]), 
                         .D(D[10:0]), 
                         .is_BSR(store), 
                         .is_RET(load), 
                         .pre_load(pre_load), 
                         .S(S[9:0]));
   stack_manager  XLXI_46 (.clk(increment_DUMMY), 
                          .in_val(XLXN_146[10:0]), 
                          .load(load), 
                          .store(store), 
                          .level_out(levels_Out[2:0]), 
                          .out_val(STACK_IN[10:0]));
   rest2  XLXI_47 (.in_val(XLXN_146[10:0]), 
                  .out_val(PC[10:0]));
   instruction_register_v2  XLXI_52 (.increment(increment_DUMMY), 
                                    .in_ins(XLXN_156[21:0]), 
                                    .is_void(is_void_DUMMY), 
                                    .out_ins(INSTRUCTION_DUMMY[13:0]), 
                                    
         .out_ins_completa(INSTRUCTION_EXTENDIDA[21:0]));
   RAM_internal  XLXI_53 (.addr(XLXN_146[10:0]), 
                         .clk(increment_DUMMY), 
                         .data_in(), 
                         .rd_enb(XLXN_75), 
                         .wr_enb(XLXN_76), 
                         .data_out(XLXN_156[21:0]));
endmodule
`timescale 1ns / 1ps

module MROM_MUSER_merge_conIR(Bus_B, 
                              ALUC, 
                              B_Bus, 
                              C_Bus, 
                              KMx, 
                              MEM, 
                              SH, 
                              Ti);

    input [6:0] Bus_B;
   output [3:0] ALUC;
   output [5:0] B_Bus;
   output [5:0] C_Bus;
   output KMx;
   output [1:0] MEM;
   output [1:0] SH;
   output [6:0] Ti;
   
   wire [6:0] Bus_B_DUMMY;
   
   assign Bus_B_DUMMY[6:0] = Bus_B[6:0];
   MicroinstructionROMv2  XLXI_9 (.a(Bus_B_DUMMY[6:0]), 
                                 .spo({ALUC[3:0], SH[1:0], KMx, MEM[1:0], 
         B_Bus[5:0], C_Bus[5:0], Ti[6:0]}));
endmodule
`timescale 1ns / 1ps

module fdce1_MUSER_merge_conIR(chipEnable, 
                               clk, 
                               d, 
                               q);

    input chipEnable;
    input clk;
    input d;
   output q;
   
   wire XLXN_1;
   
   (* HU_SET = "XLXI_1_64" *) 
   IFD_HXILINX_merge_conIR #( .INIT(1'b0) ) XLXI_1 (.C(XLXN_1), 
                                   .D(d), 
                                   .Q(q));
   AND2  XLXI_2 (.I0(chipEnable), 
                .I1(clk), 
                .O(XLXN_1));
endmodule
`timescale 1ns / 1ps

module LATCH1_MUSER_merge_conIR(CLK, 
                                CLR, 
                                ENABLE, 
                                INPUT, 
                                OUTPUT);

    input CLK;
    input CLR;
    input ENABLE;
    input INPUT;
   output OUTPUT;
   
   
   fdce1_MUSER_merge_conIR  XLXI_4 (.chipEnable(ENABLE), 
                                   .clk(CLK), 
                                   .d(INPUT), 
                                   .q(OUTPUT));
endmodule
`timescale 1ns / 1ps

module mux1_MUSER_merge_conIR(constante, 
                              hold, 
                              muxin, 
                              muxout);

    input constante;
    input hold;
    input muxin;
   output muxout;
   
   
   MUXCY  XLXI_1 (.CI(constante), 
                 .DI(muxin), 
                 .S(hold), 
                 .O(muxout));
endmodule
`timescale 1ns / 1ps

module mux2_MUSER_merge_conIR(const, 
                              hold, 
                              muxin, 
                              muxout);

    input [1:0] const;
    input hold;
    input [1:0] muxin;
   output [1:0] muxout;
   
   
   mux1_MUSER_merge_conIR  XLXI_1 (.constante(const[0]), 
                                  .hold(hold), 
                                  .muxin(muxin[0]), 
                                  .muxout(muxout[0]));
   mux1_MUSER_merge_conIR  XLXI_2 (.constante(const[1]), 
                                  .hold(hold), 
                                  .muxin(muxin[1]), 
                                  .muxout(muxout[1]));
endmodule
`timescale 1ns / 1ps

module mux4_MUSER_merge_conIR(const, 
                              hold, 
                              muxin, 
                              muxout);

    input [3:0] const;
    input hold;
    input [3:0] muxin;
   output [3:0] muxout;
   
   
   mux2_MUSER_merge_conIR  XLXI_1 (.const(const[1:0]), 
                                  .hold(hold), 
                                  .muxin(muxin[1:0]), 
                                  .muxout(muxout[1:0]));
   mux2_MUSER_merge_conIR  XLXI_2 (.const(const[3:2]), 
                                  .hold(hold), 
                                  .muxin(muxin[3:2]), 
                                  .muxout(muxout[3:2]));
endmodule
`timescale 1ns / 1ps

module mux5_MUSER_merge_conIR(const, 
                              hold, 
                              muxin, 
                              muxout);

    input [4:0] const;
    input hold;
    input [4:0] muxin;
   output [4:0] muxout;
   
   
   mux4_MUSER_merge_conIR  XLXI_1 (.const(const[3:0]), 
                                  .hold(hold), 
                                  .muxin(muxin[3:0]), 
                                  .muxout(muxout[3:0]));
   mux1_MUSER_merge_conIR  XLXI_3 (.constante(const[4]), 
                                  .hold(hold), 
                                  .muxin(muxin[4]), 
                                  .muxout(muxout[4]));
endmodule
`timescale 1ns / 1ps

module mux6_MUSER_merge_conIR(const, 
                              hold, 
                              muxin, 
                              muxout);

    input [5:0] const;
    input hold;
    input [5:0] muxin;
   output [5:0] muxout;
   
   
   mux5_MUSER_merge_conIR  XLXI_1 (.const(const[4:0]), 
                                  .hold(hold), 
                                  .muxin(muxin[4:0]), 
                                  .muxout(muxout[4:0]));
   mux1_MUSER_merge_conIR  XLXI_2 (.constante(const[5]), 
                                  .hold(hold), 
                                  .muxin(muxin[5]), 
                                  .muxout(muxout[5]));
endmodule
`timescale 1ns / 1ps

module mux10_MUSER_merge_conIR(const, 
                               muxin, 
                               selector, 
                               muxout);

    input [9:0] const;
    input [9:0] muxin;
    input selector;
   output [9:0] muxout;
   
   
   mux6_MUSER_merge_conIR  XLXI_3 (.const(const[5:0]), 
                                  .hold(selector), 
                                  .muxin(muxin[5:0]), 
                                  .muxout(muxout[5:0]));
   mux4_MUSER_merge_conIR  XLXI_4 (.const(const[9:6]), 
                                  .hold(selector), 
                                  .muxin(muxin[9:6]), 
                                  .muxout(muxout[9:6]));
endmodule
`timescale 1ns / 1ps

module mux7_MUSER_merge_conIR(const, 
                              hold, 
                              muxin, 
                              muxout);

    input [6:0] const;
    input hold;
    input [6:0] muxin;
   output [6:0] muxout;
   
   
   mux6_MUSER_merge_conIR  XLXI_1 (.const(const[5:0]), 
                                  .hold(hold), 
                                  .muxin(muxin[5:0]), 
                                  .muxout(muxout[5:0]));
   mux1_MUSER_merge_conIR  XLXI_2 (.constante(const[6]), 
                                  .hold(hold), 
                                  .muxin(muxin[6]), 
                                  .muxout(muxout[6]));
endmodule
`timescale 1ns / 1ps

module UC1_MUSER_merge_conIR(abusIN, 
                             aluIN, 
                             bbusIN, 
                             cbusIN, 
                             clk, 
                             DAdd, 
                             h, 
                             jump, 
                             kmxIN, 
                             memIN, 
                             shIN, 
                             typeIN, 
                             abusOUTuc1, 
                             aluOUTuc1, 
                             bbusOUTuc1, 
                             cbusOUTuc1, 
                             DAddOUTuc1, 
                             kmxOUTuc1, 
                             memOUTuc1, 
                             shOUTuc1, 
                             typeOUTuc1);

    input [4:0] abusIN;
    input [3:0] aluIN;
    input [5:0] bbusIN;
    input [5:0] cbusIN;
    input clk;
    input [9:0] DAdd;
    input h;
    input jump;
    input kmxIN;
    input [1:0] memIN;
    input [1:0] shIN;
    input [6:0] typeIN;
   output [4:0] abusOUTuc1;
   output [3:0] aluOUTuc1;
   output [5:0] bbusOUTuc1;
   output [5:0] cbusOUTuc1;
   output [9:0] DAddOUTuc1;
   output kmxOUTuc1;
   output [1:0] memOUTuc1;
   output [1:0] shOUTuc1;
   output [6:0] typeOUTuc1;
   
   wire clr;
   wire ena;
   wire hold;
   wire [3:0] XLXN_20;
   wire [1:0] XLXN_23;
   wire XLXN_26;
   wire [1:0] XLXN_29;
   wire [5:0] XLXN_33;
   wire [6:0] XLXN_36;
   wire [5:0] XLXN_39;
   wire [4:0] XLXN_42;
   wire [9:0] XLXN_151;
   wire XLXN_161;
   wire XLXN_162;
   
   assign clr = 0;
   assign ena = 1;
   assign XLXN_20 = 4'h8;
   assign XLXN_23 = 2'b00;
   assign XLXN_26 = 0;
   assign XLXN_29 = 2'b00;
   assign XLXN_33 = 6'b100011;
   assign XLXN_36 = 7'b0000000;
   assign XLXN_39 = 6'b100011;
   assign XLXN_42 = 5'b00000;
   assign XLXN_151 = 10'b0000000000;
   assign XLXN_162 = 1;
   mux4_MUSER_merge_conIR  XLXI_1 (.const(XLXN_20[3:0]), 
                                  .hold(hold), 
                                  .muxin(aluIN[3:0]), 
                                  .muxout(aluOUTuc1[3:0]));
   mux2_MUSER_merge_conIR  XLXI_2 (.const(XLXN_23[1:0]), 
                                  .hold(hold), 
                                  .muxin(shIN[1:0]), 
                                  .muxout(shOUTuc1[1:0]));
   mux1_MUSER_merge_conIR  XLXI_3 (.constante(XLXN_26), 
                                  .hold(hold), 
                                  .muxin(kmxIN), 
                                  .muxout(kmxOUTuc1));
   mux2_MUSER_merge_conIR  XLXI_4 (.const(XLXN_29[1:0]), 
                                  .hold(hold), 
                                  .muxin(memIN[1:0]), 
                                  .muxout(memOUTuc1[1:0]));
   mux6_MUSER_merge_conIR  XLXI_5 (.const(XLXN_33[5:0]), 
                                  .hold(hold), 
                                  .muxin(bbusIN[5:0]), 
                                  .muxout(bbusOUTuc1[5:0]));
   mux7_MUSER_merge_conIR  XLXI_6 (.const(XLXN_36[6:0]), 
                                  .hold(hold), 
                                  .muxin(typeIN[6:0]), 
                                  .muxout(typeOUTuc1[6:0]));
   mux6_MUSER_merge_conIR  XLXI_7 (.const(XLXN_39[5:0]), 
                                  .hold(hold), 
                                  .muxin(cbusIN[5:0]), 
                                  .muxout(cbusOUTuc1[5:0]));
   mux5_MUSER_merge_conIR  XLXI_8 (.const(XLXN_42[4:0]), 
                                  .hold(hold), 
                                  .muxin(abusIN[4:0]), 
                                  .muxout(abusOUTuc1[4:0]));
   mux10_MUSER_merge_conIR  XLXI_63 (.const(XLXN_151[9:0]), 
                                    .muxin(DAdd[9:0]), 
                                    .selector(hold), 
                                    .muxout(DAddOUTuc1[9:0]));
   OR2  XLXI_65 (.I0(jump), 
                .I1(h), 
                .O(XLXN_161));
   LATCH1_MUSER_merge_conIR  XLXI_68 (.CLK(clk), 
                                     .CLR(), 
                                     .ENABLE(XLXN_162), 
                                     .INPUT(XLXN_161), 
                                     .OUTPUT(hold));
endmodule
`timescale 1ns / 1ps

module Decode_MUSER_merge_conIR(cbusmir, 
                                CLK, 
                                instruction, 
                                CBUS);

    input [5:0] cbusmir;
    input CLK;
    input [13:0] instruction;
   output [5:0] CBUS;
   
   wire selector;
   wire XLXN_4;
   wire XLXN_5;
   wire XLXN_6;
   wire XLXN_7;
   wire XLXN_8;
   wire XLXN_9;
   wire XLXN_147;
   
   assign XLXN_147 = 0;
   AND3  XLXI_1 (.I0(XLXN_7), 
                .I1(XLXN_6), 
                .I2(instruction[11]), 
                .O(XLXN_4));
   AND4  XLXI_2 (.I0(XLXN_9), 
                .I1(instruction[12]), 
                .I2(instruction[11]), 
                .I3(XLXN_8), 
                .O(XLXN_5));
   OR2  XLXI_3 (.I0(XLXN_5), 
               .I1(XLXN_4), 
               .O(selector));
   INV  XLXI_6 (.I(instruction[12]), 
               .O(XLXN_6));
   INV  XLXI_7 (.I(instruction[13]), 
               .O(XLXN_7));
   INV  XLXI_8 (.I(instruction[10]), 
               .O(XLXN_8));
   INV  XLXI_9 (.I(instruction[13]), 
               .O(XLXN_9));
   mux1_MUSER_merge_conIR  XLXI_30 (.constante(XLXN_147), 
                                   .hold(selector), 
                                   .muxin(cbusmir[5]), 
                                   .muxout(CBUS[5]));
   mux5_MUSER_merge_conIR  XLXI_31 (.const(instruction[9:5]), 
                                   .hold(selector), 
                                   .muxin(cbusmir[4:0]), 
                                   .muxout(CBUS[4:0]));
endmodule
`timescale 1ns / 1ps

module COMPARADOR5_MUSER_merge_conIR(a, 
                                     b, 
                                     iguales);

    input [4:0] a;
    input [4:0] b;
   output iguales;
   
   wire XLXN_3;
   wire XLXN_4;
   wire XLXN_5;
   wire XLXN_6;
   wire XLXN_7;
   wire XLXN_8;
   wire XLXN_9;
   wire XLXN_10;
   wire XLXN_20;
   wire XLXN_23;
   wire XLXN_24;
   
   XOR2  XLXI_1 (.I0(b[0]), 
                .I1(a[0]), 
                .O(XLXN_3));
   XOR2  XLXI_2 (.I0(b[1]), 
                .I1(a[1]), 
                .O(XLXN_4));
   XOR2  XLXI_3 (.I0(b[2]), 
                .I1(a[2]), 
                .O(XLXN_5));
   XOR2  XLXI_4 (.I0(b[3]), 
                .I1(a[3]), 
                .O(XLXN_6));
   INV  XLXI_5 (.I(XLXN_3), 
               .O(XLXN_10));
   INV  XLXI_6 (.I(XLXN_4), 
               .O(XLXN_7));
   INV  XLXI_7 (.I(XLXN_5), 
               .O(XLXN_8));
   INV  XLXI_8 (.I(XLXN_6), 
               .O(XLXN_9));
   AND4  XLXI_9 (.I0(XLXN_9), 
                .I1(XLXN_8), 
                .I2(XLXN_7), 
                .I3(XLXN_10), 
                .O(XLXN_24));
   XOR2  XLXI_10 (.I0(b[4]), 
                 .I1(a[4]), 
                 .O(XLXN_20));
   INV  XLXI_11 (.I(XLXN_20), 
                .O(XLXN_23));
   AND2  XLXI_12 (.I0(XLXN_23), 
                 .I1(XLXN_24), 
                 .O(iguales));
endmodule
`timescale 1ns / 1ps

module UC2_MUSER_merge_conIR(DecodeBusA, 
                             DecodeMem, 
                             DecodeType, 
                             ExecuteBusC, 
                             ExecuteType, 
                             OperandBusC, 
                             OperandType, 
                             RetireBusC, 
                             RetireType, 
                             hold);

    input [4:0] DecodeBusA;
    input [1:0] DecodeMem;
    input [6:0] DecodeType;
    input [5:0] ExecuteBusC;
    input [6:0] ExecuteType;
    input [5:0] OperandBusC;
    input [6:0] OperandType;
    input [5:0] RetireBusC;
    input [6:0] RetireType;
   output hold;
   
   wire XLXN_19;
   wire XLXN_20;
   wire XLXN_41;
   wire XLXN_42;
   wire XLXN_43;
   wire XLXN_46;
   wire XLXN_47;
   wire XLXN_48;
   wire XLXN_49;
   wire XLXN_60;
   wire XLXN_76;
   wire XLXN_77;
   wire XLXN_78;
   
   OR2  XLXI_2 (.I0(ExecuteType[5]), 
               .I1(OperandType[5]), 
               .O(XLXN_19));
   AND2  XLXI_3 (.I0(DecodeType[4]), 
                .I1(XLXN_19), 
                .O(XLXN_60));
   AND2  XLXI_4 (.I0(DecodeType[0]), 
                .I1(XLXN_20), 
                .O(XLXN_46));
   AND3  XLXI_5 (.I0(DecodeType[2]), 
                .I1(OperandType[3]), 
                .I2(XLXN_41), 
                .O(XLXN_47));
   AND3  XLXI_6 (.I0(DecodeType[2]), 
                .I1(ExecuteType[3]), 
                .I2(XLXN_42), 
                .O(XLXN_48));
   AND3  XLXI_7 (.I0(DecodeType[2]), 
                .I1(RetireType[3]), 
                .I2(XLXN_43), 
                .O(XLXN_49));
   OR3  XLXI_9 (.I0(RetireType[1]), 
               .I1(ExecuteType[1]), 
               .I2(OperandType[1]), 
               .O(XLXN_20));
   COMPARADOR5_MUSER_merge_conIR  XLXI_26 (.a(DecodeBusA[4:0]), 
                                          .b(OperandBusC[4:0]), 
                                          .iguales(XLXN_41));
   COMPARADOR5_MUSER_merge_conIR  XLXI_28 (.a(DecodeBusA[4:0]), 
                                          .b(ExecuteBusC[4:0]), 
                                          .iguales(XLXN_42));
   COMPARADOR5_MUSER_merge_conIR  XLXI_29 (.a(DecodeBusA[4:0]), 
                                          .b(RetireBusC[4:0]), 
                                          .iguales(XLXN_43));
   (* HU_SET = "XLXI_30_65" *) 
   OR6_HXILINX_merge_conIR  XLXI_30 (.I0(XLXN_78), 
                                    .I1(XLXN_49), 
                                    .I2(XLXN_48), 
                                    .I3(XLXN_47), 
                                    .I4(XLXN_46), 
                                    .I5(XLXN_60), 
                                    .O(hold));
   OR2  XLXI_42 (.I0(DecodeMem[1]), 
                .I1(DecodeMem[0]), 
                .O(XLXN_77));
   AND2  XLXI_43 (.I0(XLXN_77), 
                 .I1(XLXN_76), 
                 .O(XLXN_78));
   OR3  XLXI_44 (.I0(RetireType[1]), 
                .I1(ExecuteType[1]), 
                .I2(OperandType[1]), 
                .O(XLXN_76));
endmodule
`timescale 1ns / 1ps

module LATCH4_MUSER_merge_conIR(CLK, 
                                CLR, 
                                ENABLE, 
                                INPUT, 
                                OUTPUT);

    input CLK;
    input CLR;
    input ENABLE;
    input [3:0] INPUT;
   output [3:0] OUTPUT;
   
   
   fdce1_MUSER_merge_conIR  XLXI_13 (.chipEnable(ENABLE), 
                                    .clk(CLK), 
                                    .d(INPUT[0]), 
                                    .q(OUTPUT[0]));
   fdce1_MUSER_merge_conIR  XLXI_14 (.chipEnable(ENABLE), 
                                    .clk(CLK), 
                                    .d(INPUT[1]), 
                                    .q(OUTPUT[1]));
   fdce1_MUSER_merge_conIR  XLXI_15 (.chipEnable(ENABLE), 
                                    .clk(CLK), 
                                    .d(INPUT[2]), 
                                    .q(OUTPUT[2]));
   fdce1_MUSER_merge_conIR  XLXI_16 (.chipEnable(ENABLE), 
                                    .clk(CLK), 
                                    .d(INPUT[3]), 
                                    .q(OUTPUT[3]));
endmodule
`timescale 1ns / 1ps

module LATCH5_MUSER_merge_conIR(CLK, 
                                CLR, 
                                ENABLE, 
                                INPUT, 
                                OUTPUT);

    input CLK;
    input CLR;
    input ENABLE;
    input [4:0] INPUT;
   output [4:0] OUTPUT;
   
   
   LATCH4_MUSER_merge_conIR  XLXI_1 (.CLK(CLK), 
                                    .CLR(CLR), 
                                    .ENABLE(ENABLE), 
                                    .INPUT(INPUT[3:0]), 
                                    .OUTPUT(OUTPUT[3:0]));
   fdce1_MUSER_merge_conIR  XLXI_5 (.chipEnable(ENABLE), 
                                   .clk(CLK), 
                                   .d(INPUT[4]), 
                                   .q(OUTPUT[4]));
endmodule
`timescale 1ns / 1ps

module LATCH6_MUSER_merge_conIR(CLK, 
                                CLR, 
                                ENABLE, 
                                INPUT, 
                                OUTPUT);

    input CLK;
    input CLR;
    input ENABLE;
    input [5:0] INPUT;
   output [5:0] OUTPUT;
   
   
   LATCH5_MUSER_merge_conIR  XLXI_1 (.CLK(CLK), 
                                    .CLR(CLR), 
                                    .ENABLE(ENABLE), 
                                    .INPUT(INPUT[4:0]), 
                                    .OUTPUT(OUTPUT[4:0]));
   fdce1_MUSER_merge_conIR  XLXI_4 (.chipEnable(ENABLE), 
                                   .clk(CLK), 
                                   .d(INPUT[5]), 
                                   .q(OUTPUT[5]));
endmodule
`timescale 1ns / 1ps

module LATCH7_MUSER_merge_conIR(CLK, 
                                CLR, 
                                ENABLE, 
                                INPUT, 
                                OUTPUT);

    input CLK;
    input CLR;
    input ENABLE;
    input [6:0] INPUT;
   output [6:0] OUTPUT;
   
   
   LATCH6_MUSER_merge_conIR  XLXI_1 (.CLK(CLK), 
                                    .CLR(CLR), 
                                    .ENABLE(ENABLE), 
                                    .INPUT(INPUT[5:0]), 
                                    .OUTPUT(OUTPUT[5:0]));
   LATCH1_MUSER_merge_conIR  XLXI_2 (.CLK(CLK), 
                                    .CLR(CLR), 
                                    .ENABLE(ENABLE), 
                                    .INPUT(INPUT[6]), 
                                    .OUTPUT(OUTPUT[6]));
endmodule
`timescale 1ns / 1ps

module toRetire_MUSER_merge_conIR(cbusIN, 
                                  CLK, 
                                  CLR, 
                                  ENABLE, 
                                  typeIN, 
                                  cbusOUTret, 
                                  typeOUTret);

    input [5:0] cbusIN;
    input CLK;
    input CLR;
    input ENABLE;
    input [6:0] typeIN;
   output [5:0] cbusOUTret;
   output [6:0] typeOUTret;
   
   
   LATCH7_MUSER_merge_conIR  XLXI_1 (.CLK(CLK), 
                                    .CLR(CLR), 
                                    .ENABLE(ENABLE), 
                                    .INPUT(typeIN[6:0]), 
                                    .OUTPUT(typeOUTret[6:0]));
   LATCH6_MUSER_merge_conIR  XLXI_2 (.CLK(CLK), 
                                    .CLR(CLR), 
                                    .ENABLE(ENABLE), 
                                    .INPUT(cbusIN[5:0]), 
                                    .OUTPUT(cbusOUTret[5:0]));
endmodule
`timescale 1ns / 1ps

module LATCH10_MUSER_merge_conIR(CLK, 
                                 CLR, 
                                 ENABLE, 
                                 INPUT, 
                                 OUTPUT);

    input CLK;
    input CLR;
    input ENABLE;
    input [9:0] INPUT;
   output [9:0] OUTPUT;
   
   
   LATCH6_MUSER_merge_conIR  XLXI_1 (.CLK(CLK), 
                                    .CLR(CLR), 
                                    .ENABLE(ENABLE), 
                                    .INPUT(INPUT[5:0]), 
                                    .OUTPUT(OUTPUT[5:0]));
   LATCH4_MUSER_merge_conIR  XLXI_2 (.CLK(CLK), 
                                    .CLR(CLR), 
                                    .ENABLE(ENABLE), 
                                    .INPUT(INPUT[9:6]), 
                                    .OUTPUT(OUTPUT[9:6]));
endmodule
`timescale 1ns / 1ps

module LATCH2_MUSER_merge_conIR(CLK, 
                                CLR, 
                                ENABLE, 
                                INPUT, 
                                OUTPUT);

    input CLK;
    input CLR;
    input ENABLE;
    input [1:0] INPUT;
   output [1:0] OUTPUT;
   
   
   LATCH1_MUSER_merge_conIR  XLXI_1 (.CLK(CLK), 
                                    .CLR(CLR), 
                                    .ENABLE(ENABLE), 
                                    .INPUT(INPUT[0]), 
                                    .OUTPUT(OUTPUT[0]));
   LATCH1_MUSER_merge_conIR  XLXI_2 (.CLK(CLK), 
                                    .CLR(CLR), 
                                    .ENABLE(ENABLE), 
                                    .INPUT(INPUT[1]), 
                                    .OUTPUT(OUTPUT[1]));
endmodule
`timescale 1ns / 1ps

module toOperand_MUSER_merge_conIR(abusIN, 
                                   aluIN, 
                                   bbusIN, 
                                   cbusIN, 
                                   CLK, 
                                   CLR, 
                                   DAddIN, 
                                   ENABLE, 
                                   kmxIN, 
                                   memIN, 
                                   shIN, 
                                   typeIN, 
                                   abusOUT, 
                                   aluOUT, 
                                   bbusOUT, 
                                   cbusOUT, 
                                   DAddOUT, 
                                   kmxOUT, 
                                   memOUT, 
                                   shOUT, 
                                   typeOUT);

    input [4:0] abusIN;
    input [3:0] aluIN;
    input [5:0] bbusIN;
    input [5:0] cbusIN;
    input CLK;
    input CLR;
    input [9:0] DAddIN;
    input ENABLE;
    input kmxIN;
    input [1:0] memIN;
    input [1:0] shIN;
    input [6:0] typeIN;
   output [4:0] abusOUT;
   output [3:0] aluOUT;
   output [5:0] bbusOUT;
   output [5:0] cbusOUT;
   output [9:0] DAddOUT;
   output kmxOUT;
   output [1:0] memOUT;
   output [1:0] shOUT;
   output [6:0] typeOUT;
   
   
   LATCH4_MUSER_merge_conIR  ALU (.CLK(CLK), 
                                 .CLR(CLR), 
                                 .ENABLE(ENABLE), 
                                 .INPUT(aluIN[3:0]), 
                                 .OUTPUT(aluOUT[3:0]));
   LATCH2_MUSER_merge_conIR  XLXI_2 (.CLK(CLK), 
                                    .CLR(CLR), 
                                    .ENABLE(ENABLE), 
                                    .INPUT(shIN[1:0]), 
                                    .OUTPUT(shOUT[1:0]));
   LATCH1_MUSER_merge_conIR  XLXI_3 (.CLK(CLK), 
                                    .CLR(CLR), 
                                    .ENABLE(ENABLE), 
                                    .INPUT(kmxIN), 
                                    .OUTPUT(kmxOUT));
   LATCH2_MUSER_merge_conIR  XLXI_4 (.CLK(CLK), 
                                    .CLR(CLR), 
                                    .ENABLE(ENABLE), 
                                    .INPUT(memIN[1:0]), 
                                    .OUTPUT(memOUT[1:0]));
   LATCH6_MUSER_merge_conIR  XLXI_5 (.CLK(CLK), 
                                    .CLR(CLR), 
                                    .ENABLE(ENABLE), 
                                    .INPUT(bbusIN[5:0]), 
                                    .OUTPUT(bbusOUT[5:0]));
   LATCH7_MUSER_merge_conIR  XLXI_6 (.CLK(CLK), 
                                    .CLR(CLR), 
                                    .ENABLE(ENABLE), 
                                    .INPUT(typeIN[6:0]), 
                                    .OUTPUT(typeOUT[6:0]));
   LATCH6_MUSER_merge_conIR  XLXI_22 (.CLK(CLK), 
                                     .CLR(CLR), 
                                     .ENABLE(ENABLE), 
                                     .INPUT(cbusIN[5:0]), 
                                     .OUTPUT(cbusOUT[5:0]));
   LATCH5_MUSER_merge_conIR  XLXI_23 (.CLK(CLK), 
                                     .CLR(CLR), 
                                     .ENABLE(ENABLE), 
                                     .INPUT(abusIN[4:0]), 
                                     .OUTPUT(abusOUT[4:0]));
   LATCH10_MUSER_merge_conIR  XLXI_24 (.CLK(CLK), 
                                      .CLR(CLR), 
                                      .ENABLE(ENABLE), 
                                      .INPUT(DAddIN[9:0]), 
                                      .OUTPUT(DAddOUT[9:0]));
endmodule
`timescale 1ns / 1ps

module toExecute_MUSER_merge_conIR(aluIN, 
                                   cbusIN, 
                                   CLK, 
                                   CLR, 
                                   ENABLE, 
                                   shIN, 
                                   typeIN, 
                                   aluOUTexec, 
                                   cbusOUTexec, 
                                   shOUTexec, 
                                   typeOUTexec);

    input [3:0] aluIN;
    input [5:0] cbusIN;
    input CLK;
    input CLR;
    input ENABLE;
    input [1:0] shIN;
    input [6:0] typeIN;
   output [3:0] aluOUTexec;
   output [5:0] cbusOUTexec;
   output [1:0] shOUTexec;
   output [6:0] typeOUTexec;
   
   
   LATCH4_MUSER_merge_conIR  XLXI_1 (.CLK(CLK), 
                                    .CLR(CLR), 
                                    .ENABLE(ENABLE), 
                                    .INPUT(aluIN[3:0]), 
                                    .OUTPUT(aluOUTexec[3:0]));
   LATCH2_MUSER_merge_conIR  XLXI_2 (.CLK(CLK), 
                                    .CLR(CLR), 
                                    .ENABLE(ENABLE), 
                                    .INPUT(shIN[1:0]), 
                                    .OUTPUT(shOUTexec[1:0]));
   LATCH7_MUSER_merge_conIR  XLXI_3 (.CLK(CLK), 
                                    .CLR(CLR), 
                                    .ENABLE(ENABLE), 
                                    .INPUT(typeIN[6:0]), 
                                    .OUTPUT(typeOUTexec[6:0]));
   LATCH6_MUSER_merge_conIR  XLXI_4 (.CLK(CLK), 
                                    .CLR(CLR), 
                                    .ENABLE(ENABLE), 
                                    .INPUT(cbusIN[5:0]), 
                                    .OUTPUT(cbusOUTexec[5:0]));
endmodule
`timescale 1ns / 1ps

module Tuberia_MUSER_merge_conIR(ALU, 
                                 BBUS, 
                                 cbusrom, 
                                 CLK2, 
                                 instruction, 
                                 JUMP, 
                                 KMX, 
                                 MEM, 
                                 SH, 
                                 TYPEIN, 
                                 ABUSOUT, 
                                 ALUOUT, 
                                 BBUSOUT, 
                                 CBUSOUT, 
                                 DAddOUT, 
                                 HOLD, 
                                 KMXOUT, 
                                 MEMOUT, 
                                 SHOUT, 
                                 TYPEOUT);

    input [3:0] ALU;
    input [5:0] BBUS;
    input [5:0] cbusrom;
    input CLK2;
    input [13:0] instruction;
    input JUMP;
    input KMX;
    input [1:0] MEM;
    input [1:0] SH;
    input [6:0] TYPEIN;
   output [4:0] ABUSOUT;
   output [3:0] ALUOUT;
   output [5:0] BBUSOUT;
   output [5:0] CBUSOUT;
   output [9:0] DAddOUT;
   output HOLD;
   output KMXOUT;
   output [1:0] MEMOUT;
   output [1:0] SHOUT;
   output [6:0] TYPEOUT;
   
   wire [4:0] ABUSaUC1;
   wire [3:0] ALUaUC1;
   wire [3:0] ALUop;
   wire [5:0] BBUSaUC1;
   wire [5:0] CBUS;
   wire [5:0] CBUSaUC1;
   wire [5:0] CBUSexec;
   wire [5:0] CBUSop;
   wire [9:0] DAddaUC1;
   wire KMXaUC1;
   wire [1:0] MEMaUC1;
   wire [1:0] SHaUC1;
   wire [1:0] SHop;
   wire [6:0] TYPEaUC1;
   wire [6:0] TYPEexec;
   wire [6:0] TYPEop;
   wire XLXN_2;
   wire XLXN_11;
   wire XLXN_49;
   wire XLXN_50;
   wire XLXN_60;
   wire XLXN_61;
   wire XLXN_77;
   wire XLXN_84;
   wire XLXN_85;
   wire [6:0] TYPEOUT_DUMMY;
   wire [5:0] CBUSOUT_DUMMY;
   wire HOLD_DUMMY;
   
   assign XLXN_11 = 0;
   assign XLXN_49 = 0;
   assign XLXN_50 = 1;
   assign XLXN_60 = 0;
   assign XLXN_61 = 1;
   assign XLXN_84 = 1;
   assign CBUSOUT[5:0] = CBUSOUT_DUMMY[5:0];
   assign HOLD = HOLD_DUMMY;
   assign TYPEOUT[6:0] = TYPEOUT_DUMMY[6:0];
   toExecute_MUSER_merge_conIR  XLXI_5 (.aluIN(ALUop[3:0]), 
                                       .cbusIN(CBUSop[5:0]), 
                                       .CLK(CLK2), 
                                       .CLR(XLXN_49), 
                                       .ENABLE(XLXN_50), 
                                       .shIN(SHop[1:0]), 
                                       .typeIN(TYPEop[6:0]), 
                                       .aluOUTexec(ALUOUT[3:0]), 
                                       .cbusOUTexec(CBUSexec[5:0]), 
                                       .shOUTexec(SHOUT[1:0]), 
                                       .typeOUTexec(TYPEexec[6:0]));
   toRetire_MUSER_merge_conIR  XLXI_6 (.cbusIN(CBUSexec[5:0]), 
                                      .CLK(CLK2), 
                                      .CLR(XLXN_60), 
                                      .ENABLE(XLXN_61), 
                                      .typeIN(TYPEexec[6:0]), 
                                      .cbusOUTret(CBUSOUT_DUMMY[5:0]), 
                                      .typeOUTret(TYPEOUT_DUMMY[6:0]));
   INV  XLXI_7 (.I(HOLD_DUMMY), 
               .O(XLXN_2));
   toOperand_MUSER_merge_conIR  XLXI_14 (.abusIN(instruction[4:0]), 
                                        .aluIN(ALU[3:0]), 
                                        .bbusIN(BBUS[5:0]), 
                                        .cbusIN(CBUS[5:0]), 
                                        .CLK(CLK2), 
                                        .CLR(XLXN_11), 
                                        .DAddIN(instruction[9:0]), 
                                        .ENABLE(XLXN_2), 
                                        .kmxIN(KMX), 
                                        .memIN(MEM[1:0]), 
                                        .shIN(SH[1:0]), 
                                        .typeIN(TYPEIN[6:0]), 
                                        .abusOUT(ABUSaUC1[4:0]), 
                                        .aluOUT(ALUaUC1[3:0]), 
                                        .bbusOUT(BBUSaUC1[5:0]), 
                                        .cbusOUT(CBUSaUC1[5:0]), 
                                        .DAddOUT(DAddaUC1[9:0]), 
                                        .kmxOUT(KMXaUC1), 
                                        .memOUT(MEMaUC1[1:0]), 
                                        .shOUT(SHaUC1[1:0]), 
                                        .typeOUT(TYPEaUC1[6:0]));
   UC2_MUSER_merge_conIR  XLXI_17 (.DecodeBusA(instruction[4:0]), 
                                  .DecodeMem(MEM[1:0]), 
                                  .DecodeType(TYPEIN[6:0]), 
                                  .ExecuteBusC(CBUSexec[5:0]), 
                                  .ExecuteType(TYPEexec[6:0]), 
                                  .OperandBusC(CBUSop[5:0]), 
                                  .OperandType(TYPEop[6:0]), 
                                  .RetireBusC(CBUSOUT_DUMMY[5:0]), 
                                  .RetireType(TYPEOUT_DUMMY[6:0]), 
                                  .hold(XLXN_77));
   Decode_MUSER_merge_conIR  XLXI_32 (.cbusmir(cbusrom[5:0]), 
                                     .CLK(CLK2), 
                                     .instruction(instruction[13:0]), 
                                     .CBUS(CBUS[5:0]));
   fdce1_MUSER_merge_conIR  XLXI_33 (.chipEnable(XLXN_84), 
                                    .clk(XLXN_85), 
                                    .d(XLXN_77), 
                                    .q(HOLD_DUMMY));
   INV  XLXI_35 (.I(CLK2), 
                .O(XLXN_85));
   UC1_MUSER_merge_conIR  XLXI_37 (.abusIN(ABUSaUC1[4:0]), 
                                  .aluIN(ALUaUC1[3:0]), 
                                  .bbusIN(BBUSaUC1[5:0]), 
                                  .cbusIN(CBUSaUC1[5:0]), 
                                  .clk(CLK2), 
                                  .DAdd(DAddaUC1[9:0]), 
                                  .h(HOLD_DUMMY), 
                                  .jump(JUMP), 
                                  .kmxIN(KMXaUC1), 
                                  .memIN(MEMaUC1[1:0]), 
                                  .shIN(SHaUC1[1:0]), 
                                  .typeIN(TYPEaUC1[6:0]), 
                                  .abusOUTuc1(ABUSOUT[4:0]), 
                                  .aluOUTuc1(ALUop[3:0]), 
                                  .bbusOUTuc1(BBUSOUT[5:0]), 
                                  .cbusOUTuc1(CBUSop[5:0]), 
                                  .DAddOUTuc1(DAddOUT[9:0]), 
                                  .kmxOUTuc1(KMXOUT), 
                                  .memOUTuc1(MEMOUT[1:0]), 
                                  .shOUTuc1(SHop[1:0]), 
                                  .typeOUTuc1(TYPEop[6:0]));
endmodule
`timescale 1ns / 1ps

module merge_MUSER_merge_conIR(clk, 
                               instruction, 
                               JUMP, 
                               abus_out, 
                               alu_out, 
                               bbus_out, 
                               cbus_out, 
                               DAdd_out, 
                               hold, 
                               kmx_out, 
                               mem_out, 
                               sh_out, 
                               type_out);

    input clk;
    input [13:0] instruction;
    input JUMP;
   output [4:0] abus_out;
   output [3:0] alu_out;
   output [5:0] bbus_out;
   output [5:0] cbus_out;
   output [9:0] DAdd_out;
   output hold;
   output kmx_out;
   output [1:0] mem_out;
   output [1:0] sh_out;
   output [6:0] type_out;
   
   wire [3:0] alu;
   wire [5:0] bbus;
   wire [5:0] cbus;
   wire kmx;
   wire [1:0] mem;
   wire [1:0] sh;
   wire [6:0] Ti;
   
   Tuberia_MUSER_merge_conIR  XLXI_2 (.ALU(alu[3:0]), 
                                     .BBUS(bbus[5:0]), 
                                     .cbusrom(cbus[5:0]), 
                                     .CLK2(clk), 
                                     .instruction(instruction[13:0]), 
                                     .JUMP(JUMP), 
                                     .KMX(kmx), 
                                     .MEM(mem[1:0]), 
                                     .SH(sh[1:0]), 
                                     .TYPEIN(Ti[6:0]), 
                                     .ABUSOUT(abus_out[4:0]), 
                                     .ALUOUT(alu_out[3:0]), 
                                     .BBUSOUT(bbus_out[5:0]), 
                                     .CBUSOUT(cbus_out[5:0]), 
                                     .DAddOUT(DAdd_out[9:0]), 
                                     .HOLD(hold), 
                                     .KMXOUT(kmx_out), 
                                     .MEMOUT(mem_out[1:0]), 
                                     .SHOUT(sh_out[1:0]), 
                                     .TYPEOUT(type_out[6:0]));
   MROM_MUSER_merge_conIR  XLXI_3 (.Bus_B(instruction[13:7]), 
                                  .ALUC(alu[3:0]), 
                                  .B_Bus(bbus[5:0]), 
                                  .C_Bus(cbus[5:0]), 
                                  .KMx(kmx), 
                                  .MEM(mem[1:0]), 
                                  .SH(sh[1:0]), 
                                  .Ti(Ti[6:0]));
endmodule
`timescale 1ns / 1ps

module merge_conIR(CLK, 
                   CY, 
                   W, 
                   abus_out, 
                   alu_out, 
                   bbus_out, 
                   cbus_out, 
                   DAdd_out, 
                   INST_EXTEND, 
                   kmx_out, 
                   levels_out, 
                   mem_out, 
                   sh_out);

    input CLK;
    input CY;
    input [15:0] W;
   output [4:0] abus_out;
   output [3:0] alu_out;
   output [5:0] bbus_out;
   output [5:0] cbus_out;
   output [9:0] DAdd_out;
   output [21:0] INST_EXTEND;
   output kmx_out;
   output [2:0] levels_out;
   output [1:0] mem_out;
   output [1:0] sh_out;
   
   wire hold;
   wire [6:0] type_out;
   wire [13:0] XLXN_32;
   wire XLXN_49;
   
   merge_MUSER_merge_conIR  XLXI_2 (.clk(CLK), 
                                   .instruction(XLXN_32[13:0]), 
                                   .JUMP(XLXN_49), 
                                   .abus_out(abus_out[4:0]), 
                                   .alu_out(alu_out[3:0]), 
                                   .bbus_out(bbus_out[5:0]), 
                                   .cbus_out(cbus_out[5:0]), 
                                   .DAdd_out(DAdd_out[9:0]), 
                                   .hold(hold), 
                                   .kmx_out(kmx_out), 
                                   .mem_out(mem_out[1:0]), 
                                   .sh_out(sh_out[1:0]), 
                                   .type_out(type_out[6:0]));
   unionMagica_MUSER_merge_conIR  XLXI_5 (.CLK(CLK), 
                                         .CY(CY), 
                                         .HOLD(hold), 
                                         .W(W[15:0]), 
                                         .increment(), 
                                         .INSTRUCTION(XLXN_32[13:0]), 
                                         
         .INSTRUCTION_EXTENDIDA(INST_EXTEND[21:0]), 
                                         .is_void(XLXN_49), 
                                         .levels_Out(levels_out[2:0]), 
                                         .PC());
endmodule
