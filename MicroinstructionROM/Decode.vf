////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : Decode.vf
// /___/   /\     Timestamp : 06/06/2020 23:27:26
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -sympath C:/Users/Martina/Desktop/EV-20-Grupo2/MicroinstructionROM/ipcore_dir -intstyle ise -family artix7 -verilog C:/Users/Martina/Desktop/EV-20-Grupo2/MicroinstructionROM/Decode.vf -w C:/Users/Martina/Desktop/EV-20-Grupo2/MicroinstructionROM/Decode.sch
//Design Name: Decode
//Device: artix7
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module mux1_MUSER_Decode(constante, 
                         hold, 
                         muxin, 
                         muxout);

    input constante;
    input hold;
    input muxin;
   output muxout;
   
   
   MUXCY  XLXI_1 (.CI(constante), 
                 .DI(muxin), 
                 .S(hold), 
                 .O(muxout));
endmodule
`timescale 1ns / 1ps

module mux2_MUSER_Decode(const, 
                         hold, 
                         muxin, 
                         muxout);

    input [1:0] const;
    input hold;
    input [1:0] muxin;
   output [1:0] muxout;
   
   
   mux1_MUSER_Decode  XLXI_1 (.constante(const[0]), 
                             .hold(hold), 
                             .muxin(muxin[0]), 
                             .muxout(muxout[0]));
   mux1_MUSER_Decode  XLXI_2 (.constante(const[1]), 
                             .hold(hold), 
                             .muxin(muxin[1]), 
                             .muxout(muxout[1]));
endmodule
`timescale 1ns / 1ps

module mux4_MUSER_Decode(const, 
                         hold, 
                         muxin, 
                         muxout);

    input [3:0] const;
    input hold;
    input [3:0] muxin;
   output [3:0] muxout;
   
   
   mux2_MUSER_Decode  XLXI_1 (.const(const[1:0]), 
                             .hold(hold), 
                             .muxin(muxin[1:0]), 
                             .muxout(muxout[1:0]));
   mux2_MUSER_Decode  XLXI_2 (.const(const[3:2]), 
                             .hold(hold), 
                             .muxin(muxin[3:2]), 
                             .muxout(muxout[3:2]));
endmodule
`timescale 1ns / 1ps

module mux5_MUSER_Decode(const, 
                         hold, 
                         muxin, 
                         muxout);

    input [4:0] const;
    input hold;
    input [4:0] muxin;
   output [4:0] muxout;
   
   
   mux4_MUSER_Decode  XLXI_1 (.const(const[3:0]), 
                             .hold(hold), 
                             .muxin(muxin[3:0]), 
                             .muxout(muxout[3:0]));
   mux1_MUSER_Decode  XLXI_3 (.constante(const[4]), 
                             .hold(hold), 
                             .muxin(muxin[4]), 
                             .muxout(muxout[4]));
endmodule
`timescale 1ns / 1ps

module Decode(cbusmir, 
              CLK, 
              instruction, 
              CBUS);

    input [5:0] cbusmir;
    input CLK;
    input [13:0] instruction;
   output [5:0] CBUS;
   
   wire selector;
   wire XLXN_4;
   wire XLXN_5;
   wire XLXN_6;
   wire XLXN_7;
   wire XLXN_8;
   wire XLXN_9;
   wire XLXN_147;
   
   assign XLXN_147 = 0;
   AND3  XLXI_1 (.I0(XLXN_7), 
                .I1(XLXN_6), 
                .I2(instruction[11]), 
                .O(XLXN_4));
   AND4  XLXI_2 (.I0(XLXN_9), 
                .I1(instruction[12]), 
                .I2(instruction[11]), 
                .I3(XLXN_8), 
                .O(XLXN_5));
   OR2  XLXI_3 (.I0(XLXN_5), 
               .I1(XLXN_4), 
               .O(selector));
   INV  XLXI_6 (.I(instruction[12]), 
               .O(XLXN_6));
   INV  XLXI_7 (.I(instruction[13]), 
               .O(XLXN_7));
   INV  XLXI_8 (.I(instruction[10]), 
               .O(XLXN_8));
   INV  XLXI_9 (.I(instruction[13]), 
               .O(XLXN_9));
   mux1_MUSER_Decode  XLXI_30 (.constante(XLXN_147), 
                              .hold(selector), 
                              .muxin(cbusmir[5]), 
                              .muxout(CBUS[5]));
   mux5_MUSER_Decode  XLXI_31 (.const(instruction[9:5]), 
                              .hold(selector), 
                              .muxin(cbusmir[4:0]), 
                              .muxout(CBUS[4:0]));
endmodule
